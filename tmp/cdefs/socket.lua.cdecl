
typedef long			__darwin_ssize_t;
typedef __darwin_ssize_t        ssize_t;
int	 close(int) ;
struct sockaddr {
__uint8_t	sa_len;
sa_family_t	sa_family;
char		sa_data[14];
};
int	accept(int, struct sockaddr * restrict, socklen_t * restrict)
;
int	bind(int, const struct sockaddr *, socklen_t) ;
int	connect(int, const struct sockaddr *, socklen_t) ;
int	listen(int, int) ;
ssize_t	recv(int, void *, size_t, int) ;
ssize_t	recvfrom(int, void *, size_t, int, struct sockaddr * restrict,
socklen_t * restrict) ;
ssize_t	send(int, const void *, size_t, int) ;
ssize_t	sendto(int, const void *, size_t,
int, const struct sockaddr *, socklen_t) ;
int	setsockopt(int, int, int, const void *, socklen_t);
int	socket(int, int, int);
struct in6_addr {
union {
__uint8_t   __u6_addr8[16];
__uint16_t  __u6_addr16[8];
__uint32_t  __u6_addr32[4];
} __u6_addr;
};
struct sockaddr_in6 {
__uint8_t	sin6_len;
sa_family_t	sin6_family;
in_port_t	sin6_port;
__uint32_t	sin6_flowinfo;
struct in6_addr	sin6_addr;
__uint32_t	sin6_scope_id;
};
const char	*inet_ntop(int, const void *, char *, socklen_t);
struct addrinfo {
int	ai_flags;
int	ai_family;
int	ai_socktype;
int	ai_protocol;
socklen_t ai_addrlen;
char	*ai_canonname;
struct	sockaddr *ai_addr;
struct	addrinfo *ai_next;
};
void		freeaddrinfo(struct addrinfo *);
int		getaddrinfo(const char * restrict, const char * restrict,
const struct addrinfo * restrict,
struct addrinfo ** restrict);
int	fcntl(int, int, ...) ;
union pulpo_bytes_op {
unsigned char p[0];
unsigned short s;
unsigned int l;
unsigned long long ll;
};
typedef struct pulpo_sockopt {
union {
char p[sizeof(int)];
int data;
} rblen;
union {
char p[sizeof(int)];
int data;
} wblen;
int timeout;
bool blocking;
} pulpo_sockopt_t;
typedef struct pulpo_addrinfo {
union {
struct sockaddr_in addr4;
struct sockaddr_in6 addr6;
struct sockaddr addrp[1];
};
socklen_t alen[1];
} pulpo_addrinfo_t;